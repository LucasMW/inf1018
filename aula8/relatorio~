.text

.global	add
add:	push	%ebp
	mov	%esp, %ebp

	mov	8(%ebp), %eax
	add	12(%ebp), %eax

	mov	%ebp, %esp
	pop	%ebp
	ret

#include <stdio.h>

int add (int a, int b);

int main (void) {
   printf("%d\n", add(4,5));
   return 0;
}

[shazan.grad.inf.puc-rio.br:~/inf1018/aula8] gcc -Wall -m32 -o lab7 add.s main.c 
[shazan.grad.inf.puc-rio.br:~/inf1018/aula8] ./lab7
9

add2.s
.text

.global	add
add:	push	%ebp
	mov	%esp, %ebp

	mov	8(%ebp), %eax
	add	12(%ebp), %eax
	add     16(%ebp), %eax
	mov	%ebp, %esp
	pop	%ebp
	ret
main2.c
#include <stdio.h>

int add (int a, int b, int c);

int main (void) {
   printf("%d\n", add(4,5,-8));
   return 0;
}
[shazan.grad.inf.puc-rio.br:~/inf1018/aula8] gcc -Wall -m32 -o prog8.2 add2.s main2.c
[shazan.grad.inf.puc-rio.br:~/inf1018/aula8] ./prog8.2 

add3.s                         1
.text

.global	add1
add1:	push	%ebp  /* Início da Função */
	mov	%esp, %ebp
	push  	%ebx 

	mov	8(%ebp), %ecx /* %ecx=a */
	mov	12(%ebp), %edx /* %edx=n */ 
	mov 	$0, %eax  /* s=0 */
	mov     $0, %ebx  /* i=0 */
L1:	cmpl    %edx,%ebx /* i<n ? */
	jge     Fim
	addl	(%ecx),%eax /* s+= *a */
	addl	$4, %ecx /* a++ */
	addl 	$1, %ebx /* i++ */
	jmp 	L1
	

Fim:	pop 	%ebx       /* Preserve %ebx */
	mov	%ebp, %esp  /* fim de função */
	pop	%ebp
	ret

main3.c
#include <stdio.h>

int add1 (int *a, int n);

int main (void) {
	int i;
   int a[10];
	for(i=0;i<10;i++)
	a[i]=i+1;
   printf("%d\n", add1(a,10));
   return 0;
}
[shazan.grad.inf.puc-rio.br:~/inf1018/aula8] gcc -Wall -m32 -o prog8.3 add3.s main3.c
[shazan.grad.inf.puc-rio.br:~/inf1018/aula8] ./prog8.3                          55

foo.s
.text

.global	foo
foo:	push	%ebp  /* Início da Função */
	mov	%esp, %ebp
	push  	%ebx 

	mov	8(%ebp), %ecx /* %ecx=a */
	mov	12(%ebp), %edx /* %edx=n */ 
	mov 	$0, %eax  /* s=0 */
	mov     $0, %ebx  /* i=0 */
L1:	cmpl    12(%ebp),%ebx /* i<n ? */
	jge     Fim  /* i>=n  caia fora */
	mov	%ebx, %edx /* Sessão a[i] */
	imull   $4, %edx  /* edx= i*4 */
	add 	%ecx, %edx   /* edx= i*4 +&a[0] */ 
	add     (%edx), %eax /* s=+a[i] */ 
	cmpl    $0,(%edx)   /* a[i]==0? */
	jne 	L2 	/* a[i]!=0 vá para else */
	mov     %eax, (%edx)  /* a[i]=s */
	mov	$0, %eax /* s=0 */
	
L2:	addl 	$1, %ebx /* i++ */
	jmp 	L1
	

Fim:	pop 	%ebx       /* Preserve %ebx */
	mov	%ebp, %esp  /* fim de função */
	pop	%ebp
	ret

main4.c
#include <stdio.h>

void foo (int a[], int n);


int main (void) {
	int i;
   int a[]={10,1,2,3,4,5,0,1,2,3,4,5};
	foo(a,12);
	for(i=0;i<12;i++)
	printf("%d\n",a[i]);
   return 0;
}

fat.s
/*int fat (int n) {
  if (n==0) return 1;
  else return n*fat(n-1);
}*/
.text

.global	fat
fat:	push	%ebp  /* Início da Função */
	mov	%esp, %ebp
	

	mov	8(%ebp), %edx /* %edx=n */
	cmpl	$0, %edx /* n==0? */
	jne	L1	/*n!=0 else */
	mov	$1, %eax /* preparing to return 1 */
	jmp 	Fim
L1:	sub 	$1, %edx /* n-1; */
	push	%edx     /* atributo n-1 */
	call	fat
	addl	$4, %esp
	imull 	8(%ebp),%eax /* %eax=n*%eax */	   	
	
	/*retorne */

Fim:	
	mov	%ebp, %esp  /* fim de função */
	pop	%ebp
	ret

#include <stdio.h>

int fat (int n);


int main (void) {
	
	
	printf("%d\n",fat(5));
   return 0;
}

