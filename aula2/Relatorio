LAB 2 
Lucas Menezes Oliveira Sousa
c1310844

#include <stdio.h>

void dump (void *p, int n) {
  unsigned char *p1 = p;
  while (n--) {
    printf("%p - %02x\n", p1, *p1);
    p1++;
  }
}
 int main (void) {
      int i = 10000;
      dump(&i, sizeof(i));
      return 0;
    }
O programa mostra  os valores do inteiro i em 4(int) endereços de memória em dígitos hexadecimais(2 dígitos por endereço)
Ele mostra primeiro os algarismos mais baixos e depois os mais altos

Eu criei essa versão para agilizar os meus testes
#include <stdio.h>

void dump (void *p, int n) {
  unsigned char *p1 = p;
  while (n--) {
    printf("%p - %02x\n", p1, *p1);
    p1++;
  }
}
 int main (void) {
      int i = 4;
	char controlchar='a';
	while(controlchar!='s')
	{
	printf("enter a number\n");	
	scanf("%d",&i);
        dump(&i, sizeof(i));
	printf("press any key to continue\npress s to exit\n ");
	scanf("%c",&controlchar);
	}
      return 0;
    }

2 Usei este para tratar de char
#include <stdio.h>

void dump (void *p, int n) {
  unsigned char *p1 = p;
  while (n--) {
    printf("%p - %02x\n", p1, *p1);
    p1++;
  }
}
 int main (void) {
      char i = 4;
	char controlchar='a';
	while(controlchar!='s')
	{
	printf("enter a character\n");	
	scanf("%c",&i);
        dump(&i, sizeof(i));
	printf("press any key to continue\npress s to exit\n ");
	scanf("%c",&controlchar);
	}
      return 0;
    }

3 Usei este para short
#include <stdio.h>

void dump (void *p, int n) {
  unsigned char *p1 = p;
  while (n--) {
    printf("%p - %02x\n", p1, *p1);
    p1++;
  }
}
 int main (void) {
	int b;      
	short int i = 4;
	char controlchar='a';
	while(controlchar!='s')
	{
	printf("enter a number\n");	
	scanf("%i",&b);
	i=b; //conversão
        dump(&i, sizeof(i));
	printf("press any key to continue\npress s to exit\n ");
	scanf("%c",&controlchar);
	}
      return 0;
    }

4 Este para strings 
#include <stdio.h>

void dump (void *p, int n) {
  unsigned char *p1 = p;
  while (n--) {
    printf("%p - %02x\n", p1, *p1);
    p1++;
  }
}
 int main (void) {
      char i[] = {'U','u','m','a',' ','s','t','r','i','n','g','\0','\n','s','$',00};
	printf("string:\t%s\n",i);
      dump(i, sizeof(i));

      return 0;
    }
Resultado:
[shazan.grad.inf.puc-rio.br:~/inf1018/aula2] ./dump4
string:	Uuma string
0xff993ec0 - 55
0xff993ec1 - 75
0xff993ec2 - 6d
0xff993ec3 - 61
0xff993ec4 - 20
0xff993ec5 - 73
0xff993ec6 - 74
0xff993ec7 - 72
0xff993ec8 - 69
0xff993ec9 - 6e
0xff993eca - 67
0xff993ecb - 00
0xff993ecc - 0a
0xff993ecd - 73
0xff993ece - 24
0xff993ecf - 00

Exercício 2 Explico nos comentários

#include <ctype.h>
#include <stdio.h>

int string2num (char *s) {
  int a = 0;
  for (; *s; s++) //percorra a string
    a = a*10 + (*s - '0'); // o inteiro a retornar é o inteiro anterior*10 + o próximo algarismo
  return a;
}

int main (void) {
  printf("==> %d\n", string2num("01234"));
  printf("==> %d\n", string2num("01234") + 1);
  printf("==> %d\n", string2num("01234") + string2num("1"));
  return 0;
 /------------------/

#include <ctype.h>
#include <stdio.h>

int string2num (char *s, int base) {
  int a = 0;
  for (; *s; s++) //percorra a string
	if(*s>=48&&*s<=57) //é numero
    a = a*base + (*s - '0'); // o inteiro a retornar é o inteiro anterior*base + o próximo algarismo
else 
if(*s>=65&&*s<=90) // letra maiuscula
a = a*base + (*s - 'A'+10);
else
if(*s>=97&&*s<=122) //letra minuscula
a = a*base + (*s - 'a'+10);
  return a;
}

int main (void) {
   printf("%d\n", string2num("777", 8));
  printf("%d\n", string2num("777", 10));
 printf("%d\n", string2num("1a", 16));
  printf("%d\n", string2num("a09b", 16));
  printf("%d\n", string2num("z09b", 36)); //base limite
  return 0;
}

Feito!!!

